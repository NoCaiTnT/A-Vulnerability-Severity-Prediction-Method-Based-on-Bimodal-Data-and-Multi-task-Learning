# coding: UTF-8
import torch
import torch.nn as nn
# from pytorch_pretrained_bert import BertModel, BertTokenizer
from pytorch_pretrained import BertModel, BertTokenizer


class Config(object):

    def __init__(self, dataset):
        self.model_name = 'bert'
        # self.train_path = dataset + '/data/T1.txt' 
        # self.dev_path = dataset + '/data/V1.txt' 
        # self.test_path = dataset + '/data/E1.txt'  
        # self.train_path = dataset + '/data/35.txt'  
        # self.dev_path = dataset + '/data/05W.txt' 
        # self.test_path = dataset + '/data/151.txt'  
        # self.train_path = dataset + '/data/C3T.txt' 
        # self.dev_path = dataset + '/data/C3V.txt' 
        # self.test_path = dataset + '/data/C3E.txt'  
        # self.train_path = dataset + '/data/T123.txt'  
        # self.dev_path = dataset + '/data/V123.txt'  
        # self.test_path = dataset + '/data/E123.txt' 

        # self.train_path = dataset + '/data/120.txt'  
        # self.dev_path = dataset + '/data/15V.txt'  
        # self.test_path = dataset + '/data/15E.txt'  
        self.train_path = dataset + '/data/S2WT1.txt' 
        self.dev_path = dataset + '/data/S2WV1.txt' 
        self.test_path = dataset + '/data/S2WE1.txt'  
        # self.train_path = dataset + '/data/777.txt'  
        # self.dev_path = dataset + '/data/111.txt'  
        # self.test_path = dataset + '/data/222.txt'  

        # self.train_path = dataset + '/data/T.txt' 
        # self.dev_path = dataset + '/data/E.txt' 
        # self.test_path = dataset + '/data/S.txt'  


        self.class_list = [x.strip() for x in open(
            dataset + '/data/class.txt').readlines()]                              
        self.save_path = dataset + '/saved_dict/' + self.model_name + '.ckpt'     
        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu') 

        self.require_improvement = 1000                                
        self.num_classes = len(self.class_list)                    
        self.num_epochs = 5                                        
        self.batch_size = 50                                      
        self.pad_size = 128                                           
        self.learning_rate = 5e-5                               
        self.bert_path = './bert_pretrain'
        self.tokenizer = BertTokenizer.from_pretrained(self.bert_path)
        self.hidden_size = 768


class Model(nn.Module):

    def __init__(self, config):
        super(Model, self).__init__()
        self.bert = BertModel.from_pretrained(config.bert_path)
        for param in self.bert.parameters():
            param.requires_grad = True
        self.fc = nn.Linear(config.hidden_size, config.num_classes)

    def forward(self, x):
        context = x[0]
        mask = x[2]  
        _, pooled = self.bert(context, attention_mask=mask, output_all_encoded_layers=False)
        out = self.fc(pooled)
        return out
